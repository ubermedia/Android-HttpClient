package co.tophe;

import java.util.concurrent.Callable;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import co.tophe.engine.DummyHttpEngine;

/**
 * An HTTP engine to process an HTTP request.
 * <p>It's a java {@link java.util.concurrent.Callable} so you can call {@link java.util.concurrent.Callable#call()}
 * directly or use an {@link co.tophe.async.AsyncTask AsyncTask} to process it asynchronously.</p>
 *
 * @param <T>  type of the object returned from the request after parsing the response body.
 * @param <SE> type of exception raised when a server-generated error is returned in the response.
 * @author Created by Steve Lhomme on 14/07/2014.
 * @see co.tophe.HttpEngine.Builder
 * @see co.tophe.async.AsyncTopheClient AsyncTopheClient
 */
public interface HttpEngine<T, SE extends ServerException> extends Callable<T>, ImmutableHttpRequest {
	/**
	 * Process the {@link co.tophe.HttpRequest} it was built with
	 *
	 * @return The result processed by the {@link co.tophe.ResponseHandler}
	 * @throws SE                     if the server generated a logical error.
	 * @throws co.tophe.HttpException when there are network or anything not generated by the server.
	 */
	T call() throws SE, HttpException;

	/**
	 * @return the {@link co.tophe.ResponseHandler} that will be used to parse the response body.
	 */
	@NonNull
	ResponseHandler<T, SE> getResponseHandler();

	/**
	 * Extra header to add to the query, in addition of the ones from the source {@link co.tophe.HttpRequest}
	 * <p>For instance, it can be used to sign a request with a timestamp.</p>
	 *
	 * @param name  HTTP Header name
	 * @param value HTTP Header value, {@code null} to remove the previously set value.
	 */
	void setHeader(@NonNull String name, @Nullable String value);

	/**
	 * Get the internal header value used by the engine, may differ or not exist in the original {@link co.tophe.HttpRequest}
	 *
	 * @param name HTTP Header name
	 * @return HTTP Header value
	 */
	@NonNull
	String getHeader(String name);

	/**
	 * Builder to turn an HTTP request ({@link co.tophe.TypedHttpRequest} or a {@link co.tophe.HttpRequest} with a
	 * {@link co.tophe.ResponseHandler}) into an {@link co.tophe.HttpEngine} to process the request.
	 *
	 * @param <T>  type of the object returned from the request after parsing the response body.
	 * @param <SE> type of exception raised when a server-generated error is returned in the response.
	 */
	public static class Builder<T, SE extends ServerException> {
		private ResponseHandler<T, SE> responseHandler;
		private RawHttpRequest httpRequest;
		private HttpEngineFactory factory = TopheClient.getHttpEngineFactory();
		private int threadStatsTag;

		public Builder() {
		}

		/**
		 * Set the {@link co.tophe.TypedHttpRequest} to be used to do the request and process the typed responsed.
		 *
		 * @return the Builder.
		 */
		public Builder<T, SE> setTypedRequest(TypedHttpRequest<T, SE> request) {
			return setRequest(request)
					.setResponseHandler(request.getResponseHandler());
		}

		/**
		 * Set the {@link co.tophe.HttpRequest} to be used to do the request.
		 * <p>For now only {@link co.tophe.RawHttpRequest} is supported.</p>
		 *
		 * @return the Builder.
		 */
		public Builder<T, SE> setRequest(@NonNull HttpRequest request) {
			if (null != request && !(request instanceof RawHttpRequest)) throw new IllegalStateException("invalid RawRequest:" + request);
			this.httpRequest = (RawHttpRequest) request;
			return this;
		}

		/**
		 * Set the {@link co.tophe.ResponseHandler} that will process the server response.
		 *
		 * @return the Builder.
		 */
		public Builder<T, SE> setResponseHandler(@NonNull ResponseHandler<T, SE> responseHandler) {
			this.responseHandler = responseHandler;
			return this;
		}

		/**
		 * Set a different {@link co.tophe.HttpEngineFactory} if you don't want to use the default one.
		 *
		 * @return the Builder.
		 */
		public Builder<T, SE> setHttpEngineFactory(HttpEngineFactory factory) {
			this.factory = factory;
			return this;
		}

		/**
		 * Set a tag to mark the query processed in this thread as belonging to a certain class of requests
		 *
		 * @param threadStatsTag the tag for the engine when it will run
		 * @return the Builder
		 * @see android.net.TrafficStats
		 */
		public Builder<T, SE> setThreadStatsTag(int threadStatsTag) {
			this.threadStatsTag = threadStatsTag;
			return this;
		}

        @NonNull
		public HttpEngine<T, SE> build() {
			if (null == httpRequest) throw new NullPointerException("missing a HttpRequest for the engine");
			if (null == responseHandler) throw new NullPointerException("missing a ResponseHandler for the engine of " + httpRequest);
			HttpEngine<T, SE> httpEngine = factory.createEngine(this);
			if (null == httpEngine)
				return new DummyHttpEngine<T, SE>(this);
			return httpEngine;
		}

		public RawHttpRequest getHttpRequest() {
			return httpRequest;
		}

		@NonNull
		public ResponseHandler<T, SE> getResponseHandler() {
			return responseHandler;
		}

		public int getThreadStatsTag() {
			return threadStatsTag;
		}
	}
}
